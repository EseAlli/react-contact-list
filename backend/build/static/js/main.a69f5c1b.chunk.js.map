{"version":3,"sources":["components/ContactForm.js","components/Contacts.js","services/contacts.js","components/Notification.js","App.js","index.js"],"names":["ContactForm","addPerson","handleChange","newContact","showForm","first_name","last_name","number","email","className","onSubmit","onClick","name","value","onChange","required","type","Contacts","contacts","deletePerson","map","contact","id","key","_id","format","created","updated","baseUrl","axios","get","then","response","data","newObject","post","put","delete","Notification","style","message","successMessage","errorMessage","App","useState","setContacts","setNewContact","setSuccessMessage","setErrorMessage","show","setShow","isNewContact","setIsNewContact","hook","contactService","intialContacts","useEffect","event","preventDefault","find","p","updatedContact","window","confirm","updatePerson","setTimeout","newPerson","concat","e","target","filter","person","catch","error","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a69f5c1b.chunk.js","sourcesContent":["import React from \"react\";\nimport \"../styles/form.css\"\n\nconst ContactForm = ({\n  addPerson,\n  handleChange,\n  newContact,\n  showForm\n}) => {\n  const {first_name, last_name, number, email} = newContact\n  return (\n    <>\n      <form className=\"modal\" onSubmit={addPerson}>\n        <div className=\"modal-content\">\n            <div className=\"modal-container\">\n            <span onClick={showForm} className=\"close-modal\">&times;</span>\n              <div>\n                First Name: <input name=\"first_name\" value={first_name} onChange={handleChange} required/>\n              </div>\n              <div>\n                Last Name: <input name=\"last_name\" value={last_name} onChange={handleChange} required/>\n              </div>\n              <div>\n                Email: <input name=\"email\" value={email} onChange={handleChange} type=\"email\" required/>\n              </div>\n              <div>\n                Number: <input name=\"number\" value={number} onChange={handleChange} required/>\n              </div>\n              <div>\n                <button className=\"submit-form\" type=\"submit\">add</button>\n            </div>\n          </div>\n        </div>\n      </form>\n    </>\n  );\n};\n\nexport default ContactForm;\n","import React from \"react\";\nimport Moment from 'react-moment'\nconst Contacts = ({ contacts, deletePerson, showForm }) => {\n  const isNewContact = false\n  return (\n    <>\n      <table>\n      <thead>\n              <tr>\n                <th>First Name</th>\n                <th>Last Name</th>\n                <th>Number</th>\n                <th>Email</th>\n                <th>Created</th>\n                <th>Updated</th>\n                <th>Actions</th>\n              </tr>\n            </thead>\n        {contacts.map((contact, id) => (            \n          <tbody key={contact._id}>\n              <tr>\n                <td>{contact.first_name}</td>\n                <td>{contact.last_name}</td>\n                <td>{contact.number}</td>\n                <td>{contact.email}</td>\n                <td>\n                  <Moment format=\"YYYY/MM/DD\">\n                    {contact.created}\n                  </Moment>\n                </td>\n                <td>\n                  <Moment format=\"YYYY/MM/DD\">\n                    {contact.updated}\n                  </Moment>\n                </td>\n                <td>\n                  <div className=\"dropdown\">\n                    <div className=\"dropdown-content\">\n                      <button onClick={()=>showForm(contact, isNewContact)}>Edit</button>\n                      <button onClick={()=>deletePerson(contact.first_name, contact._id)}>Delete</button>\n                    </div>\n                  </div>\n                </td>\n              </tr>\n            </tbody>\n          \n        ))}\n      </table>\n    </>\n  );\n};\n\nexport default Contacts;\n","import axios from 'axios'\nconst baseUrl = 'http://localhost:3001/api/contact'\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  return request.then(response => response.data)\n}\n\nconst create = newObject => {\n  const request = axios.post(baseUrl, newObject)\n  return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\n  return request.then(response => response.data)\n}\n\nconst deleteOne = (id) => {\n  const request = axios.delete(`${baseUrl}/${id}`)\n  return request.then(response => response)\n}\n\nexport default { \n  getAll, \n  create, \n  update,\n  deleteOne \n}","import React from \"react\";\nconst Notification = ({ successMessage, errorMessage }) => {\n    if (successMessage === null || errorMessage === null) {\n      return null\n    }\n\n    let style \n    let message\n    if (successMessage){\n        style = \"success\"\n        message = successMessage\n    }\n    else if (errorMessage){\n        style = \"error\"\n        message = errorMessage\n    }\n \n    return (\n        <div className={`${style}`}>\n          {message}\n        </div>\n    )\n   \n}\n\nexport default Notification;","import React, { useState, useEffect } from \"react\";\nimport '../src/styles/app.css';\nimport ContactForm from \"./components/ContactForm\";\nimport Contacts from \"./components/Contacts\";\nimport contactService from \"./services/contacts\"\nimport Notification from \"./components/Notification\"\n\nconst App = () => {\n  const intialState ={\n    first_name: \"\",\n    last_name: \"\",\n    number: \"\",\n    email: \"\"\n  }\n  const [contacts, setContacts] = useState([]);\n  const [newContact, setNewContact] = useState(intialState)\n  const [successMessage, setSuccessMessage] = useState(\"\")\n  const [errorMessage, setErrorMessage] = useState('')\n  const [show, setShow] = useState(false)\n  const [isNewContact, setIsNewContact] = useState(true)\n\n  const hook = () => {\n    contactService\n    .getAll()\n    .then( intialContacts =>{\n      setContacts(intialContacts)\n    })\n  };\n\n  useEffect(hook, []);\n\n  const addPerson = (event) => {\n    event.preventDefault();\n    const person = contacts.find(p => p._id === newContact._id)\n    if (person){\n      const {_id, first_name, last_name, number, email} = newContact\n      const updatedContact = {\n         first_name,\n         last_name,\n         number,\n         email\n      }\n      if(!isNewContact){\n        contactService\n        .update(_id, updatedContact )\n        .then(updatePerson =>{\n          hook()\n          setSuccessMessage(`Updated ${first_name}`)\n          showForm()\n          setTimeout(()=>{\n            setSuccessMessage(null)\n          }, 5000)\n        })\n      }\n      else if (window.confirm(`A person with ${email} is already exists, update ${first_name}'s with a new info?`)){\n        contactService\n        .update(_id, updatedContact )\n        .then(updatePerson =>{\n          hook()\n          setSuccessMessage(`Updated ${first_name}`)\n          showForm()\n          setTimeout(()=>{\n            setSuccessMessage(null)\n          }, 5000)\n\n        })\n      }\n    }\n    else{\n      contactService\n      .create(newContact)\n      .then(newPerson=>{\n        setContacts(contacts.concat(newPerson));\n        setSuccessMessage(`Added ${newContact.first_name} ${newContact.last_name}`)\n        showForm()\n        hook()\n        setTimeout(()=>{\n            setSuccessMessage(null)\n        }, 5000)\n      })\n    }\n  };\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setNewContact({ ...newContact, [name]: value });\n  };\n\n\n  const showForm = (contact, isNewContact) =>{\n      setShow(!show)\n      if (contact){\n        setNewContact(contact)\n        setIsNewContact(isNewContact)\n      }\n  }\n\n  const deleteUser = (name,id) =>{\n    if (window.confirm(`Delete ${name} ?`)){\n      contactService\n      .deleteOne(id)\n      .then(()=>{\n        setContacts(contacts.filter(person => person._id !== id))\n        setSuccessMessage(`Deleted ${newContact.first_name} ${newContact.last_name}`)\n        hook()\n      })\n      .catch(error=>{\n        setErrorMessage(`Information of ${name} has already been removed from the server`)\n        setTimeout(()=>{\n            setErrorMessage(null)\n        }, 5000)\n      })\n    }\n  }\n\n  return (\n    <div className=\"contact-page\">\n      <h2>Contacts</h2>\n      <Notification successMessage={successMessage} errorMessage={errorMessage}/>\n      <button className=\"add-new\" onClick={showForm}>add new</button>\n      {show ? <ContactForm\n        addPerson={addPerson}\n        handleChange={handleChange}\n        newContact={newContact}\n        showForm={showForm} \n      />: ''}\n      <Contacts \n      contacts={contacts} \n      showForm={showForm} \n      deletePerson={deleteUser}/>\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}